import { Test } from '@nestjs/testing';
import { LocalAuthGuard, LoggedInUserDto } from '..';
import { AuthService } from '../domain';
import { AuthController } from './auth.controller';
import { CredentialsDto } from './dtos/credentials.dto';

describe('AuthController', () => {
  let controller: AuthController;
  let authService: AuthService;
  const canActivate = jest.fn();

  beforeAll(async () => {
    const module = await Test.createTestingModule({
      providers: [
        { provide: AuthService, useValue: { login: jest.fn() } },
        AuthController,
      ],
    }).compile();

    controller = module.get(AuthController);
    authService = module.get(AuthService);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  afterEach(() => jest.clearAllMocks());

  describe('signIn', () => {
    it('should return authToken generated by AuthService', async () => {
      canActivate.mockResolvedValueOnce(true);
      const token = { authToken: 'token' };

      jest.spyOn(authService, 'login').mockReturnValueOnce(token);

      const result = await controller.signIn(
        {} as LoggedInUserDto,
        {} as CredentialsDto,
      );

      expect(authService.login).toHaveBeenCalled();
      expect(result).toEqual(token);
    });
  });
});
